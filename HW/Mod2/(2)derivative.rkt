(define (C? expr)
  (or (and (list? expr)
           (= (length expr) 1)
           (number? (car expr)))
      (number? expr)))
;
(define (argument? expr)
  (or (and (list? expr)
           (= (length expr) 1)
           (eq? (car expr) 'x))
      (eq? expr 'x)))
;
(define (-argument? expr)
  (or (and (list? expr)
           (= (length expr) 1)
           (eq? (car expr) '-x))
      (and (list? expr)
           (= (length expr) 2)
           (eq? (car expr) '-)
           (eq? (cadr expr) 'x))
      (eq? expr '-x)))
;
(define (sum a b)
  (cond ((and (number? a)
              (number? b))
         (+ a b))
        ((eq? a 0) b)
        ((eq? b 0) a)
        (else (list '+ a b))))
;
(define (sub a b)
  (cond ((and (number? a)
              (number? b))
         (- a b))
        ((eq? a 0) (list '- b))
        ((eq? b 0) a)
        (else (list '- a b))))
;
(define (prod a b)
  (cond ((and (number? a)
              (number? b))
         (* a b))
        ((or (eq? a 0)
             (eq? b 0))
         0)
        ((eq? a 1) b)
        ((eq? b 1) a)
        ((eq? a -1) (list '- b))
        ((eq? b -1) (list '- a))
        (else (list '* a b))))
;
(define (div a b)
  (cond ((and (number? a)
              (number? b))
         (/ a b))
        ((eq? a 0) 0)
        (else (list '/ a b))))
;
(define (my-expt a b)
  (cond ((and (number? a)
              (number? b))
         (expt a b))
        ((eq? b 0) 1)
        ((eq? b 1) a)
        ((eq? a 1) 1)
        (else (list 'expt a b))))
;
(define (next expr)
  (define (helper a b)
    (if (= a (- b 1))
        (list-ref expr a)
        (list (car expr) (list-ref expr a) (helper (+ a 1) b))))
  (helper 1 (length expr)))
;
;
(define (derivative expr)
  (cond ((C? expr) '0)
        ((argument? expr) '1)
        ((-argument? expr) '-1)
        ;        
        ((eq? (car expr) '+) (sum (derivative (cadr expr))
                                  (derivative (caddr expr))))
        ((eq? (car expr) '-) (sub (derivative (cadr expr))
                                  (derivative (caddr expr))))
        ((eq? (car expr) '*)
         (if (> (length expr) 3)
             (derivative (next expr))
             (sum
              (prod (cadr expr) (derivative (caddr expr)))
              (prod (caddr expr) (derivative (cadr expr))))))
         ((eq? (car expr) '/) (div
                               (sub
                                (prod (derivative (cadr expr)) (caddr expr))
                                (prod (derivative (caddr expr)) (cadr expr)))
                               (my-expt (caddr expr) 2)))
         ((and (eq? (car expr) 'expt)
               (number? (caddr expr))) (prod
                                        (prod (caddr expr) (derivative (cadr expr)))
                                        (my-expt (cadr expr) (- (caddr expr) 1))))
         ((eq? (car expr) 'expt) (prod
                                  (list 'log (cadr expr))
                                  expr))
         ((eq? (car expr) 'log)
          (div (derivative (cadr expr)) (cadr expr)))
         ((eq? (car expr) 'sin)
          (prod (derivative (cadr expr)) (list 'cos (cadr expr))))
         ((eq? (car expr) 'cos)
          (prod (derivative (cadr expr)) (list '- (list 'sin (cadr expr)))))
         ((eq? (car expr) 'exp) (prod (derivative (cadr expr)) expr))
         ;      
         (else #f)))
  ;
  ;tests
  ;
  (load "unit-testing.rkt")
  (define the-tests
    (list (test (derivative '(1)) '0)       
          (test (derivative '(x)) '1)
          (test (derivative '(-x)) '-1)
          (test (derivative '(* 2 x)) '2)
          (test (derivative '(+ (* 2 x) 3)) '2)
          (test (derivative '(expt x 2)) '(* 2 (expt x 1)))
          (test (eval (list (list 'lambda '(x) (derivative '(expt x 2)))
                            2)
                      (interaction-environment))
                4)
          (test (derivative '(expt 2 x)) '(* (expt 2 x) (log 2)))
          (test (eval (list (list 'lambda '(x) (derivative '(expt 2 x)))
                            2)
                      (interaction-environment))
                (* 4 (log 2)))
          (test (derivative '(log x)) '(/ 1 x))
          (test (eval (list (list 'lambda '(x) (derivative '(log x)))
                            2)
                      (interaction-environment))
                1/2)
          (test (derivative '(sin x)) '(cos x))
          (test (eval (list (list 'lambda '(x) (derivative '(sin x)))
                            0)
                      (interaction-environment))
                1)
          (test (derivative '(cos x)) '(- (sin x)))
          (test (eval (list (list 'lambda '(x) (derivative '(cos x)))
                            0)
                      (interaction-environment))
                0)
          (test (derivative '(sin (* 2 x))) '(* 2 (cos (* 2 x))))
          (test (derivative '(cos (* 2 x))) '(- (* 2 (sin (* 2 x)))))
          (test (derivative '(+ (expt x 3) (expt x 2))) '(+ (* 3 (expt x 2)) (* 2 (expt x 1))))
          (test (eval (list (list 'lambda '(x) (derivative '(+ (expt x 3) (expt x 2))))
                            2)
                      (interaction-environment))
                16)
          (test (derivative '(- (* 2 (expt x 3)) (* 2 (expt x 2)))) '(- (* 3 (* 2 (expt x 2))) ( * 3 (* 2 (expt x 1)))))
          (test (eval (list (list 'lambda '(x) (derivative '(- (* 2 (expt x 3)) (* 2 (expt x 2)))))
                            2)
                      (interaction-environment))
                12)
          ))
  ;
  (run-tests the-tests)