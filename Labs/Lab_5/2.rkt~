(define (make-source sequence . end-symbol)
  (let*
      ((buffer
        (cond
          ((vector? sequence) sequence)
          ((list? sequence) (list->vector sequence))
          ((string? sequence) (list->vector (string->list sequence)))))
       (size (vector-length buffer))
       (pos 0)
       (end (and (not (null? end-symbol)) (car end-symbol))))
    (vector buffer size pos end)))
;
(define (peek sequence)
  (let ((seq (vector-ref sequence 0))
        (len (vector-ref sequence 1))
        (pos (vector-ref sequence 2))
        (end (vector-ref sequence 3)))
    (if (< pos len)
        (vector-ref seq pos)
        end)))
;
(define-syntax next
  (syntax-rules ()
    ((_ sequence) (let ((seq (vector-ref sequence 0))
                        (len (vector-ref sequence 1))
                        (pos (vector-ref sequence 2))
                        (end (vector-ref sequence 3)))
                    (if (< pos len)
                        (begin (vector-set! sequence 2 (+ pos 1))                              
                               (vector-ref seq pos))
                        end)))))
;
;<Program>  ::= <Articles> <Body> .
;<Articles> ::= <Article> <Articles> | .
;<Article>  ::= define word <Body> end .
;<Body>     ::= if <Body> endif <Body> | integer <Body> | word <Body> | .
;
(define (parse program)
  (define src (make-source program #\nul))
  (call-with-current-continuation
   (lambda (fail)
     (begin
       (define (article-end)
         (next src)
         (cond
           ((equal? (peek src) 'end)
            (begin (next src) '()))
           ((equal? (peek src) 'if)
            (cons (list (peek src) (body-end)) (article-end)))
           ((= (vector-ref src 1)
               (vector-ref src 2)) (fail #f))
           (else (cons (peek src) (article-end)))))
       (define (body-end)
         (next src)
         (if (= (- (vector-ref src 1) 1)
                (vector-ref src 2)) (begin (next src) '())
                                    (if (equal? (peek src) 'endif)
                                        '()
                                        (cons (peek src) (body-end)))))    
       (define (article)
         (next src)
         (list (peek src) (article-end)))
       (define (body)
         (next src)
         (list (peek src) (body-end)))
       (define (scan)
         (if (not (equal? (peek src) #\nul))
             (let* ((ch (peek src))
                    (pos (vector-ref src 2)))
               (cond
                 ((equal? ch 'define) (cons (article) (scan)))
                 ((= pos 0) (list '() (cons (peek src) (begin (next src) (scan)))))
                 ((equal? ch 'if) (cons (list (peek src) (body-end)) (scan)))
                 (else (cons (peek src) (begin (next src) (scan))))))
             '()))
       (scan)))))